/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.2.3).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.acn.facilities.api.controller;

import com.acn.facilities.api.FacilitiesApiDelegate;
import com.acn.facilities.api.model.ErrorResponse;
import com.acn.facilities.api.model.FacilitiesResponse;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-10-15T00:29:26.781988600+08:00[Asia/Singapore]")

@Validated
@Api(value = "facilities", description = "the facilities API")
public interface FacilitiesApi {

    default FacilitiesApiDelegate getDelegate() {
        return new FacilitiesApiDelegate() {};
    }

    /**
     * GET /facilities/{hci} : get available facilities
     * Use this API to know about the facilities available
     *
     * @param hci facilityInfo search by HCI (required)
     * @param messageId Request Message ID header (required)
     * @param requestorId requestorId ID header (required)
     * @return successful operation (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Resource Not found (status code 404)
     *         or Server Error (status code 500)
     */
    @ApiOperation(value = "get available facilities", nickname = "getFacilitiesByHCI", notes = "Use this API to know about the facilities available", response = FacilitiesResponse.class, tags={ "facilities", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = FacilitiesResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ErrorResponse.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "Resource Not found", response = ErrorResponse.class),
        @ApiResponse(code = 500, message = "Server Error", response = ErrorResponse.class) })
    @RequestMapping(value = "/getFacilities/{hci}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<FacilitiesResponse> getFacilitiesByHCI(@ApiParam(value = "facilityInfo search by HCI",required=true) @PathVariable("hci") String hci,@ApiParam(value = "Request Message ID header" ,required=true) @RequestHeader(value="MessageId", required=true) String messageId,@ApiParam(value = "requestorId ID header" ,required=true) @RequestHeader(value="requestorId", required=true) String requestorId) {
        return getDelegate().getFacilitiesByHCI(hci, messageId, requestorId);
    }

}
